<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dynambi]]></title>
  <link href="http://joshid.github.io/atom.xml" rel="self"/>
  <link href="http://joshid.github.io/"/>
  <updated>2014-10-09T00:25:51+02:00</updated>
  <id>http://joshid.github.io/</id>
  <author>
    <name><![CDATA[Jose N.Hidalgo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exporting Pentaho CDE Dashboards to PDF]]></title>
    <link href="http://joshid.github.io/blog/2014/10/08/test/"/>
    <updated>2014-10-08T00:40:15+02:00</updated>
    <id>http://joshid.github.io/blog/2014/10/08/test</id>
    <content type="html"><![CDATA[<p><strong>Step 1: Configure Sparkl</strong></p>

<p>Sparkl is a plugin creator instrument that sits on 2 major cornerstones of Pentaho: Ctools and PDI, aiming to leverage as much as possible of our existing stack. Dashboards are used for the front-end part and PDI (named Endpoints in sparkl) are used for the back-end logic.</p>

<p>In order to export our dashboards to PDF we only need the endpoint part but we&rsquo;ll build a small dashboard so we can test the endpoint.</p>

<p>First of all you must install Sparkl using Pentaho Marketplace. Be sure to install dependencies: CDF, CDA, CDE and CGG. <em>It&rsquo;s recommended to have installed same versions of CTools (14.07.29 STABLE in my case)</em></p>

<p><img src="http://joshid.github.io/images/pdf-export/Pentaho-Marketplace.png" title="Pentaho Marketplace" alt="Pentaho Marketplace" /></p>

<p>Restart your BI Server and access Sparkl using the menu Tools as shown in image below.</p>

<p><img src="http://joshid.github.io/images/pdf-export/Sparkl-menu.png" title="Sparkl menu" alt="Sparkl menu" /></p>

<p>Now you&rsquo;ll see the initial Sparkl desktop with a default aplication:</p>

<p><img src="http://joshid.github.io/images/pdf-export/sparkl-desktop.png" title="Sparkl default desktop" alt="Sparkl default desktop" /></p>

<p><strong>Step 2: Create Sparkl Aplication</strong></p>

<p>Now it&rsquo;s time to create the aplication! Let&rsquo;s click on &ldquo;Add&rdquo; button and fill the Aplication Description.</p>

<p><img src="http://joshid.github.io/images/pdf-export/PDF-Export-About.png" title="Aplication About Description" alt="Aplication About Description" /></p>

<p>Select &ldquo;Elements&rdquo; tab and click in &ldquo;Add New Element&rdquo;. Set a name for the element, select &ldquo;Kettle Endpoint&rdquo; as element type and &ldquo;Clean Job&rdquo; in template. Now click on &ldquo;+&rdquo; button to add it to our application.</p>

<p><img src="http://joshid.github.io/images/pdf-export/Spark-Kettle-Element.png" title="Sparkl Kettle Element" alt="Sparkl Kettle Element" /></p>

<p>You can check your brand new Job in the directory:</p>

<p><code>"biserver"/pentaho-solutions/system/"app_name"/endpoints/kettle/"element".kjb</code></p>

<p><strong>Step 3: Edit Kettle Job</strong></p>

<p>Open the Job with Spoon and you&rsquo;ll see a very simple Job with only &ldquo;Start&rdquo; and &ldquo;Success&rdquo; steps.
Your final Job will look as the following image:</p>

<p><img src="http://joshid.github.io/images/pdf-export/PDFExport-Job.png" title="PDF Export Main Job" alt="PDF Export Main Job" /></p>

<p>Our Kettle endpoint will use 3 variables in order to generate PDF file:</p>

<ol>
<li>URL to render in PDF</li>
<li>Pentaho BIServer directory</li>
<li>Name of PDF file generated</li>
</ol>


<p>We&rsquo;re going to call the endpoint using these params so we need to set them in the Job. This is the purpose of the first step, a transformation with variables initialization:</p>

<p><img src="http://joshid.github.io/images/pdf-export/Job-Init-Vars.png" title="Job variables initialization" alt="Job variables initialization" /></p>

<p>Next step is a simple Javascript evaluation to know if our installation is Linux or Windows, because we&rsquo;re going to use a library call and the script depends on the platform. The code needed to know if the installation is based on linux or windows is:</p>

<p><code>is_windows</code></p>

<p>If true then we&rsquo;re going to use a branch based on Windows scripting and if false then we&rsquo;ll use a Linux script.</p>

<p>Next step is where &ldquo;magic&rdquo; happens. We&rsquo;re going to use PhantomJS to render our PDF file. The step execute a shell script with following code:</p>

<p><code>${PENTAHO_FOLDER}\tomcat\webapps\pentaho\phantomjs-lib\phantomjs.exe rasterize.js "${URL_PARAMS}" ${FILE_NAME} A4</code><br/>
(<em>in case of Windows branch</em>)</p>

<p><code>./phantomjs rasterize.js "${URL_PARAMS}" ${FILE_NAME} A4</code><br/>
(<em>in case of Linux branch</em>)</p>

<p>We must to set Working Directory in the step to</p>

<p><code>${PENTAHO_FOLDER}\tomcat\webapps\pentaho\phantomjs-lib</code><br/>
(<em>in case of Windows</em>)</p>

<p><code>${PENTAHO_FOLDER}/tomcat/webapps/pentaho/phantomjs-lib</code><br/>
(<em>in case of Linux</em>)</p>

<p>In last step (PDFFile Transformation) we need to copy our generated PDF file to result.</p>

<p><img src="http://joshid.github.io/images/pdf-export/Job-Copy-File.png" title="Job Copy File To Result" alt="Job Copy File To Result" /></p>

<p>In &ldquo;Get File Name&rdquo; step we use following selected file:</p>

<p><code>${PENTAHO_FOLDER}\tomcat\webapps\pentaho\phantomjs-lib\${FILE_NAME}</code></p>

<p>and then add a step to copy files to result.</p>

<p><strong>Step 4: Finishing Kettle Job</strong></p>

<p>Before we can test the Job we must set a couple of things. First, set Parameters of the Job (double click on empty space in spoon) to force Kettle output to ResultFiles. Remove # in cpk.response.kettleOutput parameter and set the default value to ResultFiles.</p>

<p>The second thing to do is to copy PhantomJS library in Pentaho folder: tomcat/webapps/pentaho/phantomjs-lib.<br/>
Download PhantomJS in: <a href="http://phantomjs.org/download.html">http://phantomjs.org/download.html</a></p>

<p>You need phantomjs.exe, phantomjs and rasterize.js files. <strong>checkout files permissions after copy them</strong></p>
]]></content>
  </entry>
  
</feed>
